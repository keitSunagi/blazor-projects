@using BlazorTodos.Models
@rendermode InteractiveServer
@inject ITodoService TodoService
@inject NavigationManager navMan

<MudDialog Style="width: 800px; height: 800px;">
    <DialogContent>
        <EditForm Model="@newTodo" OnValidSubmit="AddTodo" FormName="NewTodo">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <div class="input-group mb-2 mr-sm-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Título</div>
                    </div>
                    <InputText @bind-Value="@newTodo.Title" class="form-control" />
                </div>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="height: 200px;">Descrição</span>
                    </div>
                    <InputTextArea @bind-Value="@newTodo.Description" class="border-1 rounded-end" style="width: 80%; height: 200px;" />
                </div>
                <MudCheckBox T="bool" @bind-Value="isDone">Tarefa Concluída</MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="_HasEndline">Tarefa possui data limite.</MudCheckBox>
                @if (_HasEndline)
                {
                    <MudDatePicker Label="Deadline" @bind-Date="_date" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter" Editable="true" />
                }
                <div></div>
            </div>
            <MudButton Color="Color.Success" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Send">Enviar</MudButton>
        </EditForm>
    </DialogContent>
    <DialogActions>
            <MudButton Color="Color.Error" OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public IMudDialogInstance DialogInstance { get; set; }

    private bool _HasEndline;
    private bool isDone = false;
    private Todo newTodo = new Todo();
    private DateTime? _date = DateTime.Today;

    private string _errorMessage;

    public void Cancel()
    {
        DialogInstance.Close();
        navMan.NavigateTo("/");
    }

    private void AddTodo()
    {

        if (_HasEndline)
        {
            newTodo.EndLine = (DateTime)_date.Value.ToUniversalTime();
            newTodo.EndLine.ToUniversalTime();
        }
        else
        {
            newTodo.EndLine = DateTime.Today.ToUniversalTime();
        }
        newTodo.CreationDate = DateTime.UtcNow;
        try
        {
            newTodo.IsDone = isDone;
            TodoService.AddNewObject(newTodo);
            Cancel();
        }
        catch (Exception ex)
        {
            _errorMessage = "[Ocorreu um erro e essa tela será fechada]" + ex.InnerException.Message;
            Cancel();
        }

    }
}
